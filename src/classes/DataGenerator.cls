// *********************************************************************************************
// Version:      0.0.1
// Author:       Etherios
// Date Created: 05/13/2013
// Description:  Generic class for data generation and reusable object logic
//    
// Copyright 2013 Etherios All rights reserved. Customer confidential. Do not distribute.
// *********************************************************************************************
// *********************************************************************************************

public with sharing class  DataGenerator {
    
    /* Create Users */
    public static List<User> createUsers(String profileName, Integer recordsToCreate, Boolean insertRecords) {
        
        // Get User Profile
        Id profileId;
        try { profileId = Utilities.ProfileNameToId(profileName); }
        catch (Exception e) { return null; }
        
        // Create records
        List<User> userList = new List<User>();
        for (Integer i = 1; i <= recordsToCreate; i++) {
            
            String userAlias = 'usr' + i;
            User o = new User(
                Alias = userAlias, 
                Email = userAlias + '@somesfdcdomain.com', 
                UserName = userAlias + '@mysfdcdomain.com',
                LastName = 'AutoGenerated', 
                ProfileId = profileId,
                EmailEncodingKey='UTF-8',
                LanguageLocaleKey = UserInfo.getLanguage(),
                LocaleSidKey = UserInfo.getLocale(),
                TimeZoneSidKey = String.valueOf(UserInfo.getTimeZone()));
            
            userList.add(o);
        }
        
        // Check flag and insert records
        if (insertRecords) { insert userList; }
        
        // Return users
        return userList;
    }
    
    /* Create Accounts */
    public static List<Account> createAccounts(Integer recordsToCreate, Boolean insertRecords) {
        
        // Create accounts
        List<Account> accountList = new List<Account>();
        Account o = (Account)createSObjectWithDefaultValues('Account');
        
        for (Integer i = 1; i <= recordsToCreate; i++) {
        
            Account acc = o.clone(false, true);
            acc.Name = 'Account ' + i;
            acc.Phone = '2222222222';
            acc.Fax = '3333333333';
            acc.Hotel_email__c = 'testHotelEmail@hotel.com';
            acc.of_Rooms__c = 11;
            acc.of_TVs__c = 10;
            acc.Website = 'www.testwebsite.com';
            acc.Override_Website_Field_Entry_Requirement__c = true;
            accountList.add(acc);
        }
        
        // Check flag and insert records
        if (insertRecords) { insert accountList; }
         
        // Return accounts
        return accountList;
    }
    
    /* Create Contacts */
    public static List<Contact> createContacts(Account acct, Integer recordsToCreate, Boolean insertRecords) {
        
        // Create contacts
        List<Contact> contactList = new List<Contact>();
        Contact baseContact = (Contact)createSObjectWithDefaultValues('Contact');
        baseContact.AccountId = acct.Id;
        baseContact.Status__c = 'Active';
        
        for (Integer i = 1; i <= recordsToCreate; i++) {
            Contact c = baseContact.clone(false, true);
            c.FirstName = acct.Name + ' Contact ' + i;
            c.LastName = DateTime.now().formatGmt('yyyyMMddhhmmssSSS');
            contactList.add(c);
        }
        
        // Check flag and insert records
        if (insertRecords) { insert contactList; }
        
        // Return accounts
        return contactList;
    }
    
    /* Create Opportunity */
    public static List<Opportunity> createOpptys(Account opptyAccount, Integer recordsToCreate, Boolean insertRecords) {
        
        // Check for account
        if (opptyAccount == null) {
            throw new Exceptions.IllegalArgumentException('No account provided for opportunity.');
        }
        
        // Create opportunities
        List<Opportunity> opptyList = new List<Opportunity>();
        
        Opportunity o = (Opportunity)createSObjectWithDefaultValues('Opportunity');
        o.AccountId = opptyAccount.Id;
        o.StageName = Definitions.OPPTY_STAGE_AssignedToRep;
        o.CloseDate = Date.today().addDays(1);
        
        for (Integer i = 1; i <= recordsToCreate; i++) {
            Opportunity oppr = o.clone(false, true);
            oppr.Name = 'Opportunity ' + i;
            
            opptyList.add(oppr);
        }
        
        // Check flag and insert records
        if (insertRecords) { insert opptyList; }
        
        // Return opptys
        return opptyList;
    }
    
    /* Create Opportunity Line Items */
    public static List<OpportunityLineItem> createOpptyProducts(Opportunity oppty, Integer recordsToCreate, Boolean insertRecords) {
        
        // Check for oppty
        if (oppty == null) {
            throw new Exceptions.IllegalArgumentException('No opportunity provided for product.');
        }
        
        // Check for records to create
        if (recordsToCreate < 1) { return null; }
        
        // Create pricebook entries for products
        List<PricebookEntry> pricebookEntryList = createPricebookEntries(recordsToCreate, true);
        
        // Create opportunity products
        List<OpportunityLineItem> opptyProductList =  createOpptyProducts(oppty, pricebookEntryList, insertRecords);
        if (Test.isRunningTest()) { 
            System.assertNotEquals(null, opptyProductList);
            System.assertNotEquals(true, opptyProductList.isEmpty());
        }
        
        return opptyProductList;
    }
        
    /* Create Opportunity Products */
    public static List<OpportunityLineItem> createOpptyProducts(Opportunity oppty, List<Product2> productList, Boolean insertRecords) {
        
        // Check for oppty
        if (oppty == null) {
            throw new Exceptions.IllegalArgumentException('No opportunity provided for product.');
        }
        
        // Check for products
        if (productList == null) {
            throw new Exceptions.IllegalArgumentException('No product list provided.');
        }
        
        // Create pricebook entries for products
        List<PricebookEntry> pricebookEntryList = createPricebookEntries(productList, true);
        
        // Create opportunity products
        List<OpportunityLineItem> opptyProductList = createOpptyProducts(oppty, pricebookEntryList, insertRecords);
        if (Test.isRunningTest()) { 
            System.assertNotEquals(null, opptyProductList);
            System.assertNotEquals(true, opptyProductList.isEmpty());
        }
        
        return opptyProductList;
    }
    
    /* Create Opportunity Products */
    public static List<OpportunityLineItem> createOpptyProducts(Opportunity oppty, List<PricebookEntry> pricebookEntryList, Boolean insertRecords) {
        
        // Check for oppty
        if (oppty == null || oppty.Id == null) {
            throw new Exceptions.IllegalArgumentException('No opportunity provided for product.');
        }
        
        // Check for pricebook entries
        if (pricebookEntryList == null) {
            throw new Exceptions.IllegalArgumentException('No pricebook entries provided.');
        }
        
        // Create opportunity products
        List<OpportunityLineItem> opptyProductList = new List<OpportunityLineItem>();
        OpportunityLineItem o = (OpportunityLineItem)createSOBjectWithDefaultValues('OpportunityLineItem');
        o.OpportunityId = oppty.Id;
        o.Quantity = 1;
        for(Integer i = 0; i < pricebookEntryList.size(); i++) {
            OpportunityLineItem oLineItem = o.clone(false, true);
            oLineItem.PricebookEntryId = pricebookEntryList[i].Id;
            oLineItem.UnitPrice = i * 100;
            
            opptyProductList.add(oLineItem);
        }
        
        // Check flag and insert records
        if (insertRecords) { insert opptyProductList; }
        if (Test.isRunningTest()) { 
            System.assertNotEquals(null, opptyProductList);
            System.assertNotEquals(true, opptyProductList.isEmpty());
        }
        
        // Return opportunity products
        return opptyProductList;
    }
    
    /* Create Price Book Entries */
    public static List<PricebookEntry> createPricebookEntries(Integer recordsToCreate, Boolean insertRecords) {
        if (Test.isRunningTest()) { System.debug('Inside createPricebookEntries(Integer recordsToCreate, Boolean insertRecords)' ); }
        // Check for records to create
        if (recordsToCreate < 1) { return null; }
        
        // Create products
        List<Product2> productList = createProducts(recordsToCreate, true);
        
        // Create pricebook entries
        return createPricebookEntries(productList, insertRecords);
    }
        
    /* Create Price Book Entries */
    public static List<PricebookEntry> createPricebookEntries(List<Product2> productList, Boolean insertRecords) {
        
        // Check for products
        if (productList == null) {
            throw new Exceptions.IllegalArgumentException('No product list provided.');
        }
        
        // Get price book
        Id priceBookId;
        // NOTE To call this from a test method, you MUST set the SeeAllData flag to TRUE!!!
        try{ priceBookId = [SELECT Id FROM Pricebook2 WHERE isStandard = true LIMIT 1].Id; }
        Catch(Exception e) {} 
        if(priceBookId == null){return null;}
        if (Test.isRunningTest()) { System.debug('priceBookId in DataGenerator is : '+priceBookId); }
        
        // Create pricebook entries
        List<PricebookEntry> pricebookEntryList = new List<PricebookEntry>();
        
        PricebookEntry o = (PricebookEntry)createSOBjectWithDefaultValues('PricebookEntry');
        o.Pricebook2Id = priceBookId;
        o.IsActive = true;
        o.CurrencyIsoCode = Userinfo.getDefaultCurrency();
        o.UseStandardPrice = false;
        
        for(Integer i = 0; i < productList.size(); i++) {
            
            PricebookEntry p = o.clone(false, true);
            p.Product2Id = productList[i].Id;
            p.UnitPrice = i * 100;
            
            pricebookEntryList.add(p);
        }
         
        // Check flag and insert records
        if (insertRecords) { insert pricebookEntryList; }
        
        // Return pricebook entries
        return pricebookEntryList;
    }
    
    /* Create Products */
    public static List<Product2> createProducts(Integer recordsToCreate, Boolean insertRecords) {
        
        // Create opportunity products
        List<Product2> productList = new List<Product2>();
        Product2 o = (Product2)createSOBjectWithDefaultValues('Product2');
        // o.Product_Code_Ext_Id__c = o.ProductCode;
        o.IsActive = true;
            
        for(Integer i = 1; i <= recordsToCreate; i++) {
            Product2 p = o.clone(false, true);
            p.Name = 'Product ' + i;
            p.ProductCode = 'PROD-000' + i;
            productList.add(p);
        }
        
        // Check flag and insert records
        if (insertRecords) { insert productList; }
        
        // Return products
        return productList;
    }
    
    /*  */
    public static List<Case> createCases(Id accountId, Integer recordsToCreate, Boolean insertRecords) {
        
        // Check for account Id
        if (accountId == null) { return null; }
        
        // Check for records to create
        if (recordsToCreate < 1) { return null; }
        
        Case baseCase = (Case)DataGenerator.createSObjectWithDefaultValues('Case');
        baseCase.AccountId = accountId;
        baseCase.Priority = 'Low';
        
        List<Case> caseList = new List<Case>();
        for (Integer i = 1; i <= recordsToCreate; i++) {
            Case c = baseCase.clone(false, true);
            c.Subject = 'Test case ' + i;
            caseList.add(c);
        }
        
        if (insertRecords) { insert caseList; }
        
        return caseList;
    }
    
    /* Create Tasks */
    public static List<Task> createTasks(SObject objectToAttachTask, Integer recordsToCreate, Boolean insertRecords) {
        
        // Check for attach object
        if (objectToAttachTask == null) {
            throw new Exceptions.IllegalArgumentException('No object provided for associating tasks with.');
        }
        
        Task baseTask = (Task)createSObjectWithDefaultValues('Task');
        baseTask.WhatId = objectToAttachTask.Id;
        
        // Create tasks
        List<Task> taskList = new List<Task>();
        for (Integer i = 1; i <= recordsToCreate; i++) {
            Task o = baseTask.clone(false, true);
            o.Description = 'Task ' + i;
            taskList.add(o);
        }
        
        // Check flag and insert records
        if (insertRecords) { insert taskList; }
        
        // Return task
        return taskList;
    }
    
    /* Create Events */
    public static List<Event> createEvents(SObject objectToAttachEvent, Integer recordsToCreate, Boolean insertRecords) {
        
        // Check for attach object
        if (objectToAttachEvent == null) {
            throw new Exceptions.IllegalArgumentException('No object provided for associating tasks with.');
        }
        
        // Create events
        List<Event> eventList = new List<Event>();
        
        Event o = (Event)createSObjectWithDefaultValues('Event');
        o.DurationInMinutes = 30;
        o.ActivityDateTime = Datetime.now().addDays(1);
        o.WhatId = objectToAttachEvent.Id;
        
        for (Integer i = 1; i <= recordsToCreate; i++) {
            Event e = o.clone(false, true);    
            e.Description = 'Event ' + i;
            
            eventList.add(e);
        }
        
        // Check flag and insert records
        if (insertRecords) { insert eventList; }
        
        // Return events
        return eventList;
    }
    
    /* Create Notes */
    public static List<Note> createNotes(SObject parent, Integer recordsToCreate, Boolean insertRecords) {
        
        // Check for attach object
        if (parent == null) {
            throw new Exceptions.IllegalArgumentException('No parent provided for associating notes with.');
        }
        
        // Create events
        List<Note> noteList = new List<Note>();
        
        Note o = (Note)createSObjectWithDefaultValues('Note');
        o.ParentId = parent.Id;
        o.OwnerId = UserInfo.getUserId();
        //o.Title = 'Test note';
        o.Body = 'Note body...';
        
        for (Integer i = 1; i <= recordsToCreate; i++) {
            Note n = o.clone(false, true);
            n.Title = 'Note ' + i + ' - ' + DateTime.now().formatGmt('yyyyMMddhhmmssSSS');
            noteList.add(n);
        }
        
        
        // Check flag and insert records
        if (insertRecords) { insert noteList; }
        
        // Return events
        return noteList;
    }
    
    /* Create Orders */
    public static List<Order__c> createOrders(Id accountId, String status, Integer recordsToCreate, Boolean insertRecords) {
        
        // Check for assets and fail if not
        if (accountId == null) { 
            throw new Exceptions.AppException('No site account provided for creating orders.');
        }
        
        // Create base order
        Order__c baseOrder = (Order__c)createSObjectWithDefaultValues('Order__c');
        baseOrder.RecordTypeId = Utilities.RecordTypeNameToId('Order__c', Definitions.RECORDTYPE_Order);
        baseOrder.Site__c = accountId;
        baseOrder.Status__c = status;
        
        List<Order__c> orderList = new List<Order__c>();
        for (Integer i = 1; i <= recordsToCreate; i++) {
            Order__c o = baseOrder.clone(false, true);
            o.Name = 'Order ' + i + ' - ' + DateTime.now().formatGmt('yyyyMMddhhmmssSSS');
            orderList.add(o);
        }
        
        // Check flag and insert records
        if (insertRecords) { insert orderList; }
        
        // Return orders
        return orderList;
    }
    
    /* Create Order Items */
    public static List<Order_Item__c> createOrderItems(Id orderId, List<Asset> assetList, String status, Boolean insertRecords) {
        
        // Check for order provided and create if not
        if (orderId == null) {
            throw new Exceptions.AppException('No order provided for creating order items.');
        }
        
        // Check for assets and fail if not
        if (assetList == null || assetList.isEmpty()) { 
            throw new Exceptions.AppException('No assets provided for creating order items.');
        }
        
        // Create base order item
        Order_Item__c baseOrderItem = (Order_Item__c)createSObjectWithDefaultValues('Order_Item__c');
        baseOrderItem.Order__c = orderId;
        if (status != null && status != '') { baseOrderItem.Status__c = status; }
        
        // Create order items for products provided
        Map<Id, Id> assetParentMap = new Map<Id, Id>();
        Map<Id, Order_Item__c> assetOrderItemMap = new Map<Id, Order_Item__c>();
        for (Asset asst : assetList) {
            if (asst.Id != null) {
                Order_Item__c orderItem = baseOrderItem.clone(false, true);
                orderItem.Name = asst.Name;
                orderItem.Asset__c = asst.Id;
                if (asst.AccountId != null) { orderItem.Account__c = asst.AccountId; }
                if (asst.Product2Id != null) { orderItem.Product__c = asst.Product2Id; }
                assetOrderItemMap.put(asst.Id, orderItem);
                if (asst.Parent_Asset__c != null) { assetParentMap.put(asst.Id, asst.Parent_Asset__c); }
            }
        }
        
        // Check flag and insert records
        if (insertRecords) { 
            insert assetOrderItemMap.values();
            
            // Check for asset parent hierarchy
            if (!assetParentMap.isEmpty()) {
                for (Id assetId : assetOrderItemMap.keyset()) {
                    if (assetParentMap.containsKey(assetId)) {
                        assetOrderItemMap.get(assetId).Parent__c = assetOrderItemMap.get(assetParentMap.get(assetId)).Id;
                    }
                }
            }
            update assetOrderItemMap.values();
        }
        
        // Return order items
        return assetOrderItemMap.values();
    }
    
    public static List<Asset> createAssets(List<Product2> productList, Id accountId, String status, Boolean insertRecords) {
        
        // Check for products and fail if not
        if (productList == null || productList.isEmpty()) { 
            throw new Exceptions.AppException('No products provided for creating assets.');
        }
        
        // Create base asset
        Asset baseAsset = (Asset)createSObjectWithDefaultValues('Asset');
        if (status != null && status != '') { baseAsset.Status = status; }
        
        List<Asset> assetList = new List<Asset>();
        for (Product2 product : productList) {
            Asset thisAsset = baseAsset.clone(false, true);
            thisAsset.Name = product.Name;
            if (accountId != null) { thisAsset.AccountId = accountId; }
            assetList.add(thisAsset);
        }
        
        // Check flag and insert records
        if (insertRecords) { insert assetList; }
        
        // Return assets
        return assetList;
    }
    
    /* Passthrough for the main createSObjectWithDefaultValues method  */
    public static SObject createSObjectWithDefaultValues(String sObjectName) {
        return createSObjectWithDefaultValues(sObjectName, null);
    }
    
    /* This method allows the creation of objects with default values
     * NOTE The method exists due to an internal SFDC issue identified (May 2013) 
     * with validation rule checking on objects created using newSObject alone. */ 
    public static SObject createSObjectWithDefaultValues(String sObjectName, Id recordTypeId) {
        
        // Check for object name to process 
        if (sObjectName == null) return null;
        
        // Get the object type
        Schema.SObjectType objectType = Schema.getGlobalDescribe().get(sObjectName);
        if (objectType == null) {
            throw new Exceptions.UnsupportedObjectTypeException(
                'Unable to identify object type for object name \'' + sObjectName + '\'.');
        }
        
        // Create the SObject
        /* *********************************************************************************
         * IMPORTANT!!! The Case object CANNOT be created with getDefaultOptions set to TRUE 
         * as this will result in an UNCAUGHT EXCEPTION. There may be others that have not 
         * been identified. The symptom will be that the method seemingly ends without any 
         * associated logging. If another is found, modify the checking logic to include it.   
         * ****************************************************************************** */
        SObject defaultObject;
        if (objectType == Case.getSObjectType()) {
            defaultObject = objectType.newSObject(recordTypeId, false);
        } else {
            defaultObject = objectType.newSObject(recordTypeId, true);
        }
        
        if (defaultObject == null) {
            throw new Exceptions.UnknownObjectException(
                'Unable to create \'' + sObjectName + '\' object with default values.');
        }
            
        // Get field map
        DescribeSObjectResult describeResult = Schema.getGlobalDescribe().get(sObjectName).getDescribe();
        Map<String, SObjectField> fieldMap = describeResult.fields.getMap();
            
        //  Iterate over fields and assign default values to a resulting SObject
        SObject resultSObject = objectType.newSObject();
        Utilities.writeLog('Adding default values for SObject \'' + sObjectName + '\'...', 
            DataGenerator.class, 'createSObjectWithDefaultValues', LoggingLevel.DEBUG);
        
        for (String f : fieldMap.keySet()) {
            DescribeFieldResult field = fieldMap.get(f).getDescribe();
            if (field.isUpdateable()) {
                try {
                    String fieldName = field.getName();
                    object fieldValue = defaultObject.get(fieldName);
                    if (fieldValue != null) {
                        resultSObject.put(fieldName, fieldValue);
                        Utilities.writeLog('Added default value for field \'' + fieldName + '\': ' + fieldValue, 
                            DataGenerator.class, 'createSObjectWithDefaultValues', LoggingLevel.DEBUG);
                    }
                } catch (Exception e) {
                    // This error is not detrimental. Log and continue. 
                    Utilities.writeLog(
                        'Failed to update field \'' + field.getName() + '\' with default value. '
                        + 'Details: ' + e.getMessage(), 
                        DataGenerator.class, 'createSObjectWithDefaultValues', LoggingLevel.WARN);
                }
            }
        }
            
        Utilities.writeLog('Finished adding default values for SObject \'' + sObjectName + '\'. Returning SObject.', 
            DataGenerator.class, 'createSObjectWithDefaultValues', LoggingLevel.DEBUG);
            
        // Return resulting SObject
        return resultSObject;
    }
}